print "////START XX////".
print "LAT: " + SHIP:GEOPOSITION:LAT.
print "LNG: " + SHIP:GEOPOSITION:LNG.
//print "SHIP:GEOPOSITION: " + SHIP:LNG.

print "--".
print ship:altitude.

//lock throttle to 1.

stage.
wait 1.
stage.

until ship:altitude > 40000{

    if ship:altitude < 20000{
        lock targetPitch to (alt:radar/-333)+90.
        set targetDirection to 90.
        lock steering to heading(targetDirection, targetPitch, -90).
    }else{
        // Initializes a direction to prograde
        // plus a relative pitch of 90
        SET X TO SHIP:PROGRADE.
        // Steer the vessel in the direction
        // suggested by direction X.
        LOCK STEERING TO X.
    }
        
    // lock throttle to 1.
    // if ship:altitude <3000{
    //     lock targetPitch to 90.
    // }else{
    //     lock targetPitch to 90 - 1.03287 * alt:radar^0.409511.
    // }

    lock targetPitch to (alt:radar/-333)+90.
    //lock targetPitch to (((-alt:radar*0.5)+20000)-2000) / 200.
    //lock targetPitch to (90 - (2.23287 * ((alt:radar)/100))).
    
    print "alt:radar: " + alt:radar.
    print "targetPitch: " + targetPitch.
    print "SHIP:PROGRADE: " + SHIP:PROGRADE.
    print "ship:airspeed: " + ship:airspeed.
    print 1 * ((ship:airspeed-800)*-1).
    print "__________________________".
    

    

    lock throttle to 1 * ((ship:airspeed-800)*-1).
    //lock throttle to 0.5.
    wait 1.
}

print "////START DESENT".
lock throttle to 0.
stage.
wait 2.
RCS ON. // same as SET RCS TO TRUE.
SET spot TO LATLNG(0, -61.5).

until ship:VERTICALSPEED < 0{
    print "LAT: " + SHIP:GEOPOSITION:LAT.
    print "LNG: " + SHIP:GEOPOSITION:LNG.
    print "__s__".
    SET X TO SHIP:RETROGRADE.
    LOCK STEERING TO X.
}   

until ship:altitude < 3000{   

    print "LAT: " + SHIP:GEOPOSITION:LAT.
    print "LNG: " + SHIP:GEOPOSITION:LNG.

    SET X TO SHIP:RETROGRADE.
    SET diff to SHIP:GEOPOSITION:LAT - 0.
    print diff.
    LOCK STEERING TO heading(90 + diff * 10, SHIP:RETROGRADE:pitch, -90).

    print "SHIP:PROGRADE: " + SHIP:PROGRADE.
    print "SHIP:RETROGRADE: " + SHIP:RETROGRADE.
    print "SHIP:GEOPOSITION: " + SHIP:GEOPOSITION.

    print "ship:VERTICALSPEED: " + ship:VERTICALSPEED.
    print "-----".
    

    wait 0.1.
    lock throttle to 1 * ((ship:airspeed-800)).
}

until ship:altitude < 0{   

    print "LAT: " + SHIP:GEOPOSITION:LAT.
    print "LNG: " + SHIP:GEOPOSITION:LNG.

    print "--".
    print "SHIP:PROGRADE: " + SHIP:PROGRADE.
    print "ship:airspeed: " + ship:airspeed.
    print "ship:VERTICALSPEED: " + ship:VERTICALSPEED.


    wait 0.1.
    lock steering to heading(90, 90, -90).
    lock throttle to 1 * ((-ship:VERTICALSPEED-(ship:altitude/2.5-13))).
    if ship:altitude < 100{
       GEAR ON.
    }
}
// until ship:altitude < 100{    
//     print "SHIP:PROGRADE: " + SHIP:PROGRADE.
//     print "ship:airspeed: " + ship:airspeed.
//     print "ship:VERTICALSPEED: " + ship:VERTICALSPEED.
//     SET X TO SHIP:RETROGRADE.
//     LOCK STEERING TO X.
//     wait 0.1.

//     lock throttle to 1 * ((-ship:VERTICALSPEED-40)).
// }
// until ship:altitude < 50{ 
//     GEAR ON.   
//     print "SHIP:PROGRADE: " + SHIP:PROGRADE.
//     print "ship:airspeed: " + ship:airspeed.
//     print "ship:VERTICALSPEED: " + ship:VERTICALSPEED.
//     SET X TO SHIP:RETROGRADE.
//     LOCK STEERING TO X.
//     wait 0.1.

//     lock throttle to 1 * ((-ship:VERTICALSPEED-8)).
// }
